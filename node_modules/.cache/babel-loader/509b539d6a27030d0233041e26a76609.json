{"ast":null,"code":"import Geometry from'../utils/Geometry';import\"./LineView.css\";import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * a thin line that goes from point (x1, y1) to point (x2, y2)\n */var LineView=function LineView(_ref){var x1=_ref.x1,y1=_ref.y1,x2=_ref.x2,y2=_ref.y2;var mid_X=(x1+x2)/2;var mid_Y=(y1+y2)/2;var distance=Geometry.pointDistance(x1,y1,x2,y2);var angle=Geometry.pointAngleDegrees(x1,y1,x2,y2);return/*#__PURE__*/_jsx(\"div\",{className:\"line\",style:{left:mid_X-distance/2,top:mid_Y,width:distance,transform:\"rotate(\".concat(angle,\"deg)\")}});};export default LineView;","map":{"version":3,"sources":["/Users/jayson.coppoNeudesic.com/Projects/Big-bulletin-board/big-bulletin-board-ts/src/components/LineView.tsx"],"names":["Geometry","LineView","x1","y1","x2","y2","mid_X","mid_Y","distance","pointDistance","angle","pointAngleDegrees","left","top","width","transform"],"mappings":"AACA,MAAOA,CAAAA,QAAP,KAAqB,mBAArB,CACA,MAAO,gBAAP,C,2CASA;AACA;AACA,GACA,GAAMC,CAAAA,QAA2B,CAAG,QAA9BA,CAAAA,QAA8B,MAAwB,IAArBC,CAAAA,EAAqB,MAArBA,EAAqB,CAAjBC,EAAiB,MAAjBA,EAAiB,CAAbC,EAAa,MAAbA,EAAa,CAATC,EAAS,MAATA,EAAS,CACxD,GAAMC,CAAAA,KAAK,CAAG,CAACJ,EAAE,CAAGE,EAAN,EAAY,CAA1B,CACA,GAAMG,CAAAA,KAAK,CAAG,CAACJ,EAAE,CAAGE,EAAN,EAAY,CAA1B,CACA,GAAMG,CAAAA,QAAQ,CAAGR,QAAQ,CAACS,aAAT,CAAuBP,EAAvB,CAA2BC,EAA3B,CAA+BC,EAA/B,CAAmCC,EAAnC,CAAjB,CACA,GAAMK,CAAAA,KAAK,CAAGV,QAAQ,CAACW,iBAAT,CAA2BT,EAA3B,CAA+BC,EAA/B,CAAmCC,EAAnC,CAAuCC,EAAvC,CAAd,CAEA,mBACI,YAAK,SAAS,CAAC,MAAf,CAAsB,KAAK,CAAE,CACzBO,IAAI,CAAEN,KAAK,CAAIE,QAAQ,CAAG,CADD,CAEzBK,GAAG,CAAEN,KAFoB,CAGzBO,KAAK,CAAEN,QAHkB,CAIzBO,SAAS,kBAAYL,KAAZ,QAJgB,CAA7B,EADJ,CASH,CAfD,CAiBA,cAAeT,CAAAA,QAAf","sourcesContent":["import { FC } from 'react';\nimport Geometry from '../utils/Geometry';\nimport \"./LineView.css\"\n\ntype LineViewProps = {\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number\n}\n\n/**\n * a thin line that goes from point (x1, y1) to point (x2, y2)\n */\nconst LineView: FC<LineViewProps> = ({ x1, y1, x2, y2 }) => {\n    const mid_X = (x1 + x2) / 2\n    const mid_Y = (y1 + y2) / 2\n    const distance = Geometry.pointDistance(x1, y1, x2, y2);\n    const angle = Geometry.pointAngleDegrees(x1, y1, x2, y2);\n\n    return (\n        <div className='line' style={{\n            left: mid_X - (distance / 2),\n            top: mid_Y,\n            width: distance,\n            transform: `rotate(${angle}deg)`\n        }}>\n        </div>\n    );\n}\n\nexport default LineView;"]},"metadata":{},"sourceType":"module"}