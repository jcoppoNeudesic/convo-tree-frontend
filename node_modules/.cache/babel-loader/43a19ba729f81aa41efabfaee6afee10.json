{"ast":null,"code":"var _jsxFileName = \"/Users/jayson.coppoNeudesic.com/Documents/Projects/Big-bulletin-board/big-bulletin-board-ts/src/components/Board.tsx\";\nimport React, { Component } from 'react';\nimport \"./Board.css\";\nimport BoardState from '.././enums/BoardState';\nimport Geometry from '../utils/Geometry'; // import PostConnectionLine from './PostConnectionLine';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mouse_X: 0,\n      mouse_Y: 0,\n      clickedPost_X: 0,\n      clickedPost_Y: 0,\n      newPost_X: 0,\n      newPost_Y: 0\n    };\n\n    this.getConnectionLines = () => {\n      let lines = [];\n      this.props.posts.forEach((post, i) => {\n        const parentPost = this.findPost(post.parentPostId);\n\n        if (parentPost) {\n          Geometry.pointAngleRadians;\n          const lineLength = Geometry.pointDistance(post.x, post.y, parentPost.x, parentPost.y);\n          const lineLeft = (parentPost.x + 90 + post.x + 90) / 2 - lineLength / 2;\n          const lineTop = (post.y + 40 + parentPost.y + 40) / 2;\n          const lineAngle = Geometry.pointAngleDegrees(parentPost.x + 90, parentPost.y + 40, post.x + 90, post.y + 40);\n          let newLine = {\n            left: lineLeft,\n            top: lineTop,\n            width: lineLength,\n            transform: `rotate(${lineAngle}deg)`\n          };\n          lines.push(newLine);\n        }\n      });\n      return lines;\n    };\n\n    this.boardClicked = () => {\n      if (this.props.boardState === BoardState.SelectingLocation) {\n        this.setState({\n          newPost_X: this.state.mouse_X,\n          newPost_Y: this.state.mouse_Y\n        });\n        this.props.postCreate(this.state.mouse_X, this.state.mouse_Y);\n      }\n    };\n\n    this.handleMouseMove = e => {\n      let {\n        clientX,\n        clientY\n      } = e.nativeEvent;\n      this.setState({\n        mouse_X: clientX,\n        mouse_Y: clientY\n      });\n    };\n\n    this.postClicked = post => {\n      if (this.props.boardState === BoardState.Reading) {\n        this.props.postClicked(post.id);\n        this.setState({\n          clickedPost_X: post.x + 90,\n          clickedPost_Y: post.y + 40\n        });\n      }\n    };\n\n    this.findPost = id => {\n      return this.props.posts.find(post => post.id === id);\n    };\n  }\n\n  render() {\n    const {\n      clickedPost_X,\n      clickedPost_Y,\n      newPost_X,\n      newPost_Y,\n      mouse_X,\n      mouse_Y\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      onClick: this.boardClicked,\n      onMouseMove: this.handleMouseMove,\n      children: [this.props.posts.map((post, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"ID \", post.id, \": \", post.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 28\n        }, this); // return <Post key={i} post={post} handleClick={this.postClicked} />\n      }), this.getConnectionLines().map((line, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connection-line\",\n          style: {\n            left: line.left,\n            top: line.top,\n            width: line.width,\n            transform: line.transform\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 28\n        }, this); // return <PostConnectionLine key={i} post={post} />\n        // const parentPost = this.findPost(post.parentPostId);\n        // if (parentPost) {\n        //     return <PostConnectionLine key={i} post={post} parentPost={parentPost} />\n        // }\n        // return null;\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.props.boardState === BoardState.SelectingLocation ? 'connection-line' : 'hidden',\n        style: {\n          left: (clickedPost_X + mouse_X) / 2 - Geometry.pointDistance(clickedPost_X, clickedPost_Y, mouse_X, mouse_Y) / 2,\n          top: (clickedPost_Y + mouse_Y) / 2,\n          width: Geometry.pointDistance(clickedPost_X, clickedPost_Y, mouse_X, mouse_Y),\n          transform: `rotate(${Geometry.pointAngleDegrees(clickedPost_X, clickedPost_Y, mouse_X, mouse_Y)}deg)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.props.boardState === BoardState.WritingPost ? 'connection-line' : 'hidden',\n        style: {\n          left: (clickedPost_X + newPost_X) / 2 - Geometry.pointDistance(clickedPost_X, clickedPost_Y, newPost_X, newPost_Y) / 2,\n          top: (clickedPost_Y + newPost_Y) / 2,\n          width: Geometry.pointDistance(clickedPost_X, clickedPost_Y, newPost_X, newPost_Y),\n          transform: `rotate(${Geometry.pointAngleDegrees(clickedPost_X, clickedPost_Y, newPost_X, newPost_Y)}deg)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.props.boardState !== BoardState.Reading ? 'post-cursor-box' : 'hidden',\n        style: {\n          left: this.props.boardState === BoardState.SelectingLocation ? this.state.mouse_X - 30 : this.state.newPost_X - 30,\n          top: this.props.boardState === BoardState.SelectingLocation ? this.state.mouse_Y - 30 : this.state.newPost_Y - 30,\n          backgroundColor: this.props.postColor\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/jayson.coppoNeudesic.com/Documents/Projects/Big-bulletin-board/big-bulletin-board-ts/src/components/Board.tsx"],"names":["React","Component","BoardState","Geometry","Board","state","mouse_X","mouse_Y","clickedPost_X","clickedPost_Y","newPost_X","newPost_Y","getConnectionLines","lines","props","posts","forEach","post","i","parentPost","findPost","parentPostId","pointAngleRadians","lineLength","pointDistance","x","y","lineLeft","lineTop","lineAngle","pointAngleDegrees","newLine","left","top","width","transform","push","boardClicked","boardState","SelectingLocation","setState","postCreate","handleMouseMove","e","clientX","clientY","nativeEvent","postClicked","Reading","id","find","render","map","message","line","WritingPost","backgroundColor","postColor"],"mappings":"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","sourcesContent":["import React, { Component, MouseEvent } from 'react';\nimport \"./Board.css\"\nimport Post from '../models/Post';\nimport BoardState from '.././enums/BoardState';\nimport Geometry from '../utils/Geometry'\n// import PostConnectionLine from './PostConnectionLine';\n\ntype BoardProps = {\n    boardState: BoardState,\n    posts: Post[],\n    postClicked: (id: number) => void,\n    postCreate: (x: number, y: number) => void,\n    postColor: string\n}\n\ntype BoardCompState = {\n    mouse_X: number,\n    mouse_Y: number,\n    clickedPost_X: number,\n    clickedPost_Y: number,\n    newPost_X: number,\n    newPost_Y: number\n}\n\ntype LineStyle = {\n    left: number,\n    top: number,\n    width: number,\n    transform: string\n}\n\nexport default class Board extends Component<BoardProps, BoardCompState> {\n    state: BoardCompState = {\n        mouse_X: 0,\n        mouse_Y: 0,\n        clickedPost_X: 0,\n        clickedPost_Y: 0,\n        newPost_X: 0,\n        newPost_Y: 0\n    }\n\n    getConnectionLines = () => {\n        let lines: any = [];\n        this.props.posts.forEach((post, i) => {\n            const parentPost = this.findPost(post.parentPostId);\n            if (parentPost) {\n                Geometry.pointAngleRadians\n                const lineLength = Geometry.pointDistance(post.x, post.y, parentPost.x, parentPost.y)\n                const lineLeft = ((parentPost.x + 90 + post.x + 90) / 2) - (lineLength / 2);\n                const lineTop = (post.y + 40 + parentPost.y + 40) / 2;\n                const lineAngle = Geometry.pointAngleDegrees(parentPost.x + 90, parentPost.y + 40, post.x + 90, post.y + 40);\n                let newLine = {\n                    left: lineLeft,\n                    top: lineTop,\n                    width: lineLength,\n                    transform: `rotate(${lineAngle}deg)`\n                }\n                lines.push(newLine);\n            }\n        })\n        return lines;\n    }\n\n    boardClicked = () => {\n        if (this.props.boardState === BoardState.SelectingLocation) {\n            this.setState({\n                newPost_X: this.state.mouse_X,\n                newPost_Y: this.state.mouse_Y\n            })\n            this.props.postCreate(this.state.mouse_X, this.state.mouse_Y);\n        }\n    }\n\n    handleMouseMove = (e: MouseEvent) => {\n        let { clientX, clientY } = e.nativeEvent;\n        this.setState({\n            mouse_X: clientX,\n            mouse_Y: clientY\n        })\n    }\n\n    postClicked = (post: Post) => {\n        if (this.props.boardState === BoardState.Reading) {\n            this.props.postClicked(post.id);\n\n            this.setState({\n                clickedPost_X: post.x + 90,\n                clickedPost_Y: post.y + 40\n            });\n        }\n    }\n\n    findPost = (id: number): Post | undefined => {\n        return this.props.posts.find(post => post.id === id);\n    }\n\n    render() {\n        const { clickedPost_X, clickedPost_Y, newPost_X, newPost_Y, mouse_X, mouse_Y } = this.state;\n        return (\n            <div className=\"board\" onClick={this.boardClicked} onMouseMove={this.handleMouseMove}>\n                {this.props.posts.map((post, i) => {\n                    return <div>ID {post.id}: {post.message}</div>\n                    // return <Post key={i} post={post} handleClick={this.postClicked} />\n                })}\n                {this.getConnectionLines().map((line, i) => {\n                    return <div\n                        className='connection-line'\n                        key={i}\n                        style={{\n                            left: line.left,\n                            top: line.top,\n                            width: line.width,\n                            transform: line.transform\n                        }}\n                    ></div>\n                    // return <PostConnectionLine key={i} post={post} />\n                    // const parentPost = this.findPost(post.parentPostId);\n                    // if (parentPost) {\n                    //     return <PostConnectionLine key={i} post={post} parentPost={parentPost} />\n                    // }\n                    // return null;\n                })}\n                <div\n                    className={this.props.boardState === BoardState.SelectingLocation ? 'connection-line' : 'hidden'}\n                    style={{\n                        left: ((clickedPost_X + mouse_X) / 2) - (Geometry.pointDistance(clickedPost_X, clickedPost_Y, mouse_X, mouse_Y) / 2),\n                        top: ((clickedPost_Y + mouse_Y) / 2),\n                        width: Geometry.pointDistance(clickedPost_X, clickedPost_Y, mouse_X, mouse_Y),\n                        transform: `rotate(${Geometry.pointAngleDegrees(clickedPost_X, clickedPost_Y, mouse_X, mouse_Y)}deg)`\n                    }}>\n                </div>\n                <div\n                    className={this.props.boardState === BoardState.WritingPost ? 'connection-line' : 'hidden'}\n                    style={{\n                        left: ((clickedPost_X + newPost_X) / 2) - (Geometry.pointDistance(clickedPost_X, clickedPost_Y, newPost_X, newPost_Y) / 2),\n                        top: ((clickedPost_Y + newPost_Y) / 2),\n                        width: Geometry.pointDistance(clickedPost_X, clickedPost_Y, newPost_X, newPost_Y),\n                        transform: `rotate(${Geometry.pointAngleDegrees(clickedPost_X, clickedPost_Y, newPost_X, newPost_Y)}deg)`\n                    }}>\n                </div>\n                <div\n                    className={this.props.boardState !== BoardState.Reading ? 'post-cursor-box' : 'hidden'}\n                    style={{\n                        left: this.props.boardState === BoardState.SelectingLocation ? this.state.mouse_X - 30 : this.state.newPost_X - 30,\n                        top: this.props.boardState === BoardState.SelectingLocation ? this.state.mouse_Y - 30 : this.state.newPost_Y - 30,\n                        backgroundColor: this.props.postColor\n                    }}>\n                </div>\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}