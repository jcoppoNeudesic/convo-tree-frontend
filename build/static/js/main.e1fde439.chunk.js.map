{"version":3,"sources":["enums/BoardState.ts","utils/Date.ts","components/PostView.tsx","utils/Geometry.ts","components/LineView.tsx","components/PostCursorBox.tsx","components/Board.tsx","components/PostCreateForm.tsx","utils/Color.ts","services/PostsService.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BoardState","dateMethods","formatDate","date","dateObj","Date","month","getUTCMonth","day","getUTCDate","year","getUTCFullYear","time","toLocaleString","hour","minute","hour12","PostView","post","handleClick","user","message","color","x","y","className","style","left","top","backgroundColor","onClick","methods","pointDistance","x1","y1","x2","y2","sideA","sideB","Math","sqrt","pow","pointAngleRadians","atan2","pointAngleDegrees","PI","LineView","mid_X","mid_Y","distance","Geometry","angle","width","transform","PostCursorBox","Board","state","mouse_X","mouse_Y","clickedPost_X","clickedPost_Y","newPost_X","newPost_Y","boardClicked","props","boardState","SelectingLocation","setState","postCreate","handleMouseMove","e","nativeEvent","clientX","clientY","postClicked","Reading","id","findPost","posts","find","superClick","console","log","this","onMouseMove","map","i","parentPost","parentPostId","WritingPost","postColor","Component","PostCreateForm","comment","onCommentFieldChanged","currentTarget","value","submitPressed","length","handleSubmit","preventDefault","cancelPressed","onCancel","handleKeyDown","key","onSubmit","onKeyDown","name","placeholder","onChange","maxLength","disabled","colorMethods","colorWithRandomHue","random","colorLightWithRandomHue","randomLightColor","postAPI","get","Promise","resolve","reject","fetch","then","result","json","catch","err","create","method","body","JSON","stringify","headers","Accept","App","postClickedId","Color","getAllPosts","postService","_id","undefined","createdAt","presentPostCreateForm","createPostSubitted","newPost","cancelPost","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1fde439.chunk.js","sourcesContent":["enum BoardState {\n    Reading,\n    SelectingLocation,\n    WritingPost\n};\n\nexport default BoardState;","/**\n * Takes time stamp number and returns formatted date. Example: \"5/14/2006 8:29 PM\". Year not displayed if it is the current year.\n */\nconst formatDate = (date: number): string => {\n    const dateObj = new Date(date);\n    const month = dateObj.getUTCMonth() + 1; //months from 1-12\n    const day = dateObj.getUTCDate();\n    const year = dateObj.getUTCFullYear();\n    const time = dateObj.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\n    const newDate = new Date();\n    const shouldShowYear = newDate.getUTCFullYear() !== year ? true : false;\n\n    if (shouldShowYear) {\n        return month + \"/\" + day + '/' + year + ' ' + time;\n    }\n    return month + \"/\" + day + ' ' + time;\n}\n\nconst dateMethods = { formatDate };\nexport default dateMethods;","import React, { FC } from 'react';\nimport \"./PostView.css\"\nimport Post from '../models/Post';\nimport Date from '../utils/Date';\n\ntype PostViewProps = {\n    post: Post,\n    handleClick: (post: Post) => void\n}\n\nconst PostView: FC<PostViewProps> = ({ post, handleClick }) => {\n    const { user, date, message, color, x, y } = post;\n\n    return (\n        <div className='post-container' style={{ left: x, top: y }}>\n            <div\n                className='post'\n                style={{ backgroundColor: color }}\n                onClick={() => handleClick(post)}>\n                <div className='heading'>\n                    <b>{user}</b> {date && Date.formatDate(date)}\n                </div>\n                <div className='body'>{message}</div>\n            </div>\n        </div>\n    );\n}\n\nexport default PostView;","/**\n * distance between two points\n */\nconst pointDistance = (x1: number, y1: number, x2: number, y2: number): number => {\n    const sideA = x2 - x1;\n    const sideB = y2 - y1;\n    return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2));\n}\n\n/**\n * angle between two points in radians\n */\nconst pointAngleRadians = (x1: number, y1: number, x2: number, y2: number): number => {\n    return Math.atan2(y2 - y1, x2 - x1);\n}\n\n/**\n * angle between two points in degrees\n */\nconst pointAngleDegrees = (x1: number, y1: number, x2: number, y2: number): number => {\n    return Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n}\n\nconst methods = { pointDistance, pointAngleRadians, pointAngleDegrees };\nexport default methods;","import { FC } from 'react';\nimport Geometry from '../utils/Geometry';\nimport \"./LineView.css\"\n\ntype LineViewProps = {\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number\n}\n\n/**\n * a thin line that goes from point (x1, y1) to point (x2, y2)\n */\nconst LineView: FC<LineViewProps> = ({ x1, y1, x2, y2 }) => {\n    const mid_X = (x1 + x2) / 2\n    const mid_Y = (y1 + y2) / 2\n    const distance = Geometry.pointDistance(x1, y1, x2, y2);\n    const angle = Geometry.pointAngleDegrees(x1, y1, x2, y2);\n\n    return (\n        <div className='line' style={{\n            left: mid_X - (distance / 2),\n            top: mid_Y,\n            width: distance,\n            transform: `rotate(${angle}deg)`\n        }}>\n        </div>\n    );\n}\n\nexport default LineView;","import { FC } from 'react';\nimport \"./PostCursorBox.css\"\n\ntype PostCursorBoxProps = {\n    x: number,\n    y: number,\n    color: string\n}\n\n/**\n * a box that represents where a user's new post will go. It followes the mouse when selecting post location, and stays in place when writing post.\n */\nconst PostCursorBox: FC<PostCursorBoxProps> = ({ x, y, color }) => {\n    return (\n        <div className='post-cursor-box' style={{ left: x - 30, top: y - 30, backgroundColor: color }}></div>\n    );\n}\n\nexport default PostCursorBox;","import React, { Component, MouseEvent } from 'react';\nimport \"./Board.css\"\nimport PostView from './PostView';\nimport LineView from './LineView';\nimport PostCursorBox from './PostCursorBox';\nimport Post from '../models/Post';\nimport BoardState from '.././enums/BoardState';\n\ntype BoardProps = {\n    boardState: BoardState,\n    posts: Post[],\n    postClicked: (id: string) => void,\n    postCreate: (x: number, y: number) => void,\n    postColor: string\n}\n\ntype BoardCompState = {\n    mouse_X: number,\n    mouse_Y: number,\n    clickedPost_X: number,\n    clickedPost_Y: number,\n    newPost_X: number,\n    newPost_Y: number\n}\n\nexport default class Board extends Component<BoardProps, BoardCompState> {\n    state: BoardCompState = {\n        mouse_X: 0,\n        mouse_Y: 0,\n        clickedPost_X: 0,\n        clickedPost_Y: 0,\n        newPost_X: 0,\n        newPost_Y: 0\n    }\n\n    boardClicked = () => {\n        if (this.props.boardState === BoardState.SelectingLocation) {\n            this.setState({\n                newPost_X: this.state.mouse_X,\n                newPost_Y: this.state.mouse_Y\n            })\n            this.props.postCreate(this.state.mouse_X, this.state.mouse_Y);\n        }\n    }\n\n    handleMouseMove = (e: MouseEvent) => {\n        let { clientX, clientY } = e.nativeEvent;\n        this.setState({\n            mouse_X: clientX,\n            mouse_Y: clientY\n        })\n    }\n\n    postClicked = (post: Post) => {\n        if (this.props.boardState === BoardState.Reading) {\n            this.props.postClicked(post.id);\n\n            this.setState({\n                clickedPost_X: post.x + 90,\n                clickedPost_Y: post.y + 40\n            });\n        }\n    }\n\n    findPost = (id?: string): Post | undefined => {\n        return this.props.posts.find(post => post.id === id);\n    }\n\n    superClick = () => {\n        console.log('suuuuupa');\n    }\n\n    render() {\n        const { clickedPost_X, clickedPost_Y, newPost_X, newPost_Y, mouse_X, mouse_Y } = this.state;\n        return (\n            <div className=\"board-container\" onClick={this.superClick}>\n                <div className=\"board\" onClick={this.boardClicked} onMouseMove={this.handleMouseMove}>\n                    {this.props.posts.map((post, i) => {\n                        return <PostView key={i} post={post} handleClick={this.postClicked} />\n                    })}\n                    {this.props.posts.map((post, i) => {\n                        const parentPost = this.findPost(post.parentPostId);\n                        if (parentPost) {\n                            return <LineView key={i} x1={parentPost.x + 90} y1={parentPost.y + 40} x2={post.x + 90} y2={post.y + 40} />\n                        }\n                        return null;\n                    })}\n                    {this.props.boardState === BoardState.SelectingLocation &&\n                        <LineView x1={clickedPost_X} y1={clickedPost_Y} x2={mouse_X} y2={mouse_Y} />\n                    }\n                    {this.props.boardState === BoardState.WritingPost &&\n                        <LineView x1={clickedPost_X} y1={clickedPost_Y} x2={newPost_X} y2={newPost_Y} />\n                    }\n                    {this.props.boardState === BoardState.SelectingLocation &&\n                        <PostCursorBox x={mouse_X} y={mouse_Y} color={this.props.postColor} />\n                    }\n                    {this.props.boardState === BoardState.WritingPost &&\n                        <PostCursorBox x={newPost_X} y={newPost_Y} color={this.props.postColor} />\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n","import { Component, FormEvent, ChangeEvent, KeyboardEvent } from 'react';\nimport \"./PostCreateForm.css\";\n\ntype PostCreateFormProps = {\n    onSubmit: (comment: string) => void,\n    onCancel: () => void,\n    color: string\n}\n\ntype PostCreateFormState = {\n    comment: string,\n}\n\nclass PostCreateForm extends Component<PostCreateFormProps, PostCreateFormState> {\n\n    state: PostCreateFormState = {\n        comment: ''\n    };\n\n    onCommentFieldChanged = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        this.setState({ comment: e.currentTarget.value })\n    }\n\n    submitPressed = (e: FormEvent) => {\n        if (this.state.comment.length > 0) {\n            this.handleSubmit();\n            e.preventDefault();\n        }\n    }\n\n    cancelPressed = () => {\n        this.setState({ comment: '' });\n        this.props.onCancel();\n    }\n\n    handleKeyDown = (e: KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit = () => {\n        if (this.state.comment.length > 0) {\n            this.props.onSubmit(this.state.comment)\n            this.setState({ comment: '' });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"comment-form\" style={{ backgroundColor: this.props.color }} onKeyDown={this.handleKeyDown}>\n                <h2>New Comment</h2>\n                <div className=\"editFields\">\n                    <div>\n                        <textarea\n                            name=\"comment\"\n                            placeholder=\"What would you like to say?\"\n                            value={this.state.comment}\n                            onChange={this.onCommentFieldChanged}\n                            maxLength={140}\n                        />\n                    </div>\n                </div>\n                <div className=\"button-area\">\n                    <button disabled={this.state.comment.length <= 0} onClick={this.submitPressed} >Post</button>\n                    <button onClick={this.cancelPressed}>Cancel</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PostCreateForm;","const colorWithRandomHue = (): string => {\n    let hue = 360 * Math.random();\n    return 'hsl(' + hue + ', 100%, 75%)';\n}\n\nconst colorLightWithRandomHue = (): string => {\n    let hue = 360 * Math.random();\n    return 'hsl(' + hue + ', 80%, 75%)';\n}\n\nconst randomLightColor = (): string => {\n    let r = 128 + (127 * Math.random());\n    let g = 128 + (127 * Math.random());\n    let b = 128 + (127 * Math.random());\n    return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n}\n\nconst colorMethods = { colorWithRandomHue, colorLightWithRandomHue, randomLightColor };\nexport default colorMethods;","import PostRequest from \"../models/PostRequest\";\n\nconst baseAPI = 'api';\n\nconst postAPI = {\n    get() {\n        return new Promise((resolve, reject) => {\n            fetch(`/${baseAPI}/posts`)\n                .then(result => result.json())\n                .then(json => resolve(json))\n                .catch(err => reject(err));\n        });\n    },\n    create(post: PostRequest) {\n        return new Promise((resolve, reject) => {\n            fetch(`/${baseAPI}/post`, {\n                method: 'POST',\n                body: JSON.stringify(post),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                }\n            })\n                .then(result => result.json())\n                .then(json => resolve(json))\n                .catch(err => reject(err));\n        });\n    }\n}\nexport default postAPI;","import { Component } from 'react';\nimport './App.css';\nimport BoardState from './enums/BoardState';\nimport Post from './models/Post';\nimport PostRequest from './models/PostRequest';\nimport PostResponse from './models/PostResponse';\nimport Board from './components/Board';\nimport PostCreateForm from './components/PostCreateForm';\n// import samplePosts from './SamplePosts';\nimport Color from './utils/Color';\nimport postService from './services/PostsService'\n\ntype AppState = {\n  posts: Post[],\n  boardState: BoardState,\n  postClickedId: string,\n  postColor: string,\n  newPost_X: number,\n  newPost_Y: number,\n}\n\nexport default class App extends Component {\n\n  state: AppState = {\n    posts: [],\n    boardState: BoardState.Reading,\n    postClickedId: '',\n    postColor: Color.randomLightColor(), //TODO: get user color\n    newPost_X: 0,\n    newPost_Y: 0\n  }\n\n  componentDidMount() {\n    this.getAllPosts();\n  }\n\n  getAllPosts = () => {\n    postService.get()\n      .then((json: any) => {\n        const posts: Post[] = json.map((post: PostResponse) => {\n          return {\n            id: post._id,\n            parentPostId: post.parentPostId || undefined,\n            user: post.user,\n            date: post.createdAt,\n            message: post.message,\n            color: post.color,\n            x: post.x,\n            y: post.y\n          }\n        })\n\n        this.setState({ posts: posts })\n      })\n      .catch(err => {\n        console.log('err', err);\n      })\n  }\n\n  postClicked = (id: string) => {\n    this.setState({\n      boardState: BoardState.SelectingLocation,\n      postClickedId: id\n    });\n  }\n\n  presentPostCreateForm = (x: number, y: number) => {\n    this.setState({\n      boardState: BoardState.WritingPost,\n      newPost_X: x,\n      newPost_Y: y\n    });\n  }\n\n  createPostSubitted = (message: string) => {\n    const newPost: PostRequest = {\n      parentPostId: this.state.postClickedId,\n      user: 'Myself',\n      message: message,\n      color: this.state.postColor,\n      x: this.state.newPost_X - 80,\n      y: this.state.newPost_Y - 30,\n    }\n\n    this.setState({\n      boardState: BoardState.Reading,\n    })\n\n    postService.create(newPost).then(post => {\n      this.getAllPosts();\n    });\n  }\n\n  cancelPost = () => {\n    this.setState({ boardState: BoardState.Reading })\n  }\n\n  render() {\n    return <div>\n      <Board\n        boardState={this.state.boardState}\n        posts={this.state.posts}\n        postClicked={this.postClicked}\n        postCreate={this.presentPostCreateForm}\n        postColor={this.state.postColor}\n      />\n      <div className=\"ui-overlay\">\n        <div>\n          <h1>The Big Bulletin Board</h1>\n          <div className=\"header-bar\" />\n        </div>\n        {this.state.boardState === BoardState.WritingPost && (\n          <div className='comment-form-container'>\n            <PostCreateForm\n              onSubmit={this.createPostSubitted}\n              onCancel={this.cancelPost}\n              color={this.state.postColor}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}